<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<!DOCTYPE Book SYSTEM "gapdoc.dtd">
<Book Name="4ti2gap">

  <TitlePage>
    <Title>
      4ti2gap
    </Title>
    <Subtitle>
      &GAP; wraper for 4ti2
    </Subtitle>
    <Version>
      0.0.2
    </Version>
    
    <Author>
      Alfredo Sánchez-R.-Navarro<Alt Only="LaTeX"><Br/></Alt>
      <Address>
	Jerez de La Frontera <Br/>
      </Address>
      <Email>alfredo.sanchez@uca.es</Email>
      <Homepage>www.uca.es</Homepage>
    </Author>
    
    <Author>
      Pedro A. García-Sánchez<Alt Only="LaTeX"><Br/></Alt>
      <Address>
	Departamento de Álgebra,<Br/> Universidad de Granada,<Br/> 18071 Granada, España
      </Address>
      <Email>pedro@ugr.es</Email>
      <Homepage>http://www.ugr.es/local/pedro</Homepage>  
    </Author>
    
    <Date>
      11/03/2015
    </Date>
    
  </TitlePage>
  
  
  <TableOfContents/>
  <Body>

    
    <Chapter>
      <Heading>
	Introduction
      </Heading>
      This package was produced mainly due to the fact that presentations for affine and numerical semigroups are in correspondence with binomial ideals, and <C>4ti2</C> makes fast computations with these. Also factorizations of elements in affine semigroups are solutions of systems of Diophantine linear equations, and <C>zsolve</C> can do this. Some factorization invariants depend on Graver basis computations, and this is also offered by <C>4ti2</C>. Hilbert bases are needed for instance in testing if an affine semigroup is full. Again <C>4ti2</C> provides a function to compute Hilbert bases.   <P/>

      We used as skeleton package <C>NormalizInterface</C> (https://github.com/fingolfin/NormalizInterface). We really appreciate the help received from their authors.<P/>

      Though there is a nice interface to <C>4ti2</C> in <C>gap</C> provided by S. Gustche, <C>4ti2Interface</C>, it calls externally with the <C>IO</C> package <C>4ti2</C>, and we wanted the functions to be loaded dynamically without the use of temporary input and output files.

    </Chapter>

    <Chapter>
      <Heading>
	Functions
      </Heading>

      
      <Section>
	<Heading>
	  Gröbner bases
	</Heading>
	<ManSection>
	  <Func Name="GroebnerBasis4ti2" Arg="List, Order"/>
	  <Description>
	    <C>List</C> is a matrix of integers and <C>Order</C> is the ordering used to compute a Gröbner basis. The ordering may be one of the following: <A>lex</A>, <A>grlex</A>, <A>grevlex</A> or a matrix specifying an ordering.
	    The second argument is optional.
	    <P/>
	    This function calls <A>groebner</A> from <A>4ti2</A>. Notice that we are not using cost function. The output is a matrix containing the differences of the exponents of the binomials of the Gröbner basis of the ideal that is the kernel of the mapping that maps the variable <M>x_i</M> to the monomial with exponent the column of the first argument. 
	    <P/>
	    <Example><![CDATA[
gap> GroebnerBasis4ti2([[3,5,7]],[[3,5,7]]);
[ [ -4, 1, 1 ], [ -3, -1, 2 ], [ -1, 2, -1 ] ]
gap> GroebnerBasis4ti2gmp([[5, 21, 23, 26, 69]]);        
[ [ -13, 2, 1, 0, 0 ], [ -8, 3, -1, 0, 0 ], [ -5, -1, -1, 0, 1 ], 
  [ -5, -1, 2, 0, 0 ], [ -1, -1, 0, 1, 0 ] ]
gap> GroebnerBasis4ti2([[3,5,7]],"lex");    
[ [ 0, 7, -5 ], [ 1, -2, 1 ], [ 1, 5, -4 ], [ 2, 3, -3 ], [ 3, 1, -2 ], 
[ 4, -1, -1 ] ]
gap> GroebnerBasis4ti2([[3,5,7]],"grevlex");
[ [ -1, 2, -1 ], [ 3, 1, -2 ], [ 4, -1, -1 ] ]
gap> GroebnerBasis4ti2([[3,5,7]],"grlex");  
[ [ 0, 7, -5 ], [ 1, -2, 1 ], [ 1, 5, -4 ], [ 2, 3, -3 ], [ 3, 1, -2 ], 
[ 4, -1, -1 ] ]
             ]]></Example>
	  </Description>
	</ManSection>

      </Section>

      <Section>
	<Heading>
	  Hilbert bases
	</Heading>

	<ManSection>
	  <Func Name="HilbertBasis4ti2" Arg="problem"/>
	  <Description>
	    <C>problem</C> is a list to specify the input components of the "problem" (see the 4ti2 manual).
	    
	    <Example><![CDATA[
gap> problem:=[ "mat", [ [ 1, -3, 9, -1, 81 ], 
[ -9, 27, 81, -9, 1 ], [ 1, -3, 9, 1, -81 ] ], 
"rel", [ "=", "<", ">"], "sign", [1, 0, 1, 0, -1] ];; 
HilbertBasis4ti2(problem);
[ [ 3, 1, 0, 0, 0 ], [ 0, -364, 0, -1095, -27 ], [ 1, 0, 0, 1, 0 ], 
  [ 1, -121, 0, -365, -9 ], [ 0, -1, 0, 3, 0 ], [ 0, -27, 0, -81, -2 ], 
  [ 0, -14, 0, -39, -1 ], [ 2, -13, 0, -40, -1 ], [ 0, 0, 1, 9, 0 ] ]
gap> problem:=["mat", [[1, 1, 1, -1, -1, -1, 0, 0, 0 ], 
[1, 1, 1, 0, 0, 0, -1, -1, -1], [0, 1, 1, -1, 0, 0, -1, 0, 0], 
[1, 0, 1, 0, -1, 0, 0, -1,  0], [ 1, 1, 0, 0, 0, -1, 0, 0, -1], 
[ 0, 1, 1, 0, -1, 0, 0, 0, -1], [ 1, 1, 0, 0, -1, 0, -1, 0, 0]], 
"rel", [[0, 0 ,0 ,0, 0, 0, 0]], 
"sign", [[0, 0, 0, 0, 0, 0, 0, 0, 0]]];; 
HilbertBasis4ti2(problem);
[ ]
gap> problem:=["mat", [[1, -31, -1, 1], [-111, 5, 10, 25]]];;
HilbertBasis4ti2(problem);
[ [ 35, 0, 136, 101 ], [ 15, 1, 36, 52 ], [ 195, 34, 0, 859 ], 
  [ 110, 19, 4, 483 ], [ 25, 4, 8, 107 ] ]
            ]]></Example>
	  </Description>
	</ManSection>

      </Section>

      <Section>
	<Heading>
	  Graver bases
	</Heading>

	<ManSection>
	  <Func Name="GraverBasis4ti2" Arg="List"/>
	  <Description>
	    <C>List</C> is a list with two elements; the first is either <C>"mat"</C> or <C>"lat"</C>, and the second is a matrix $<A>A</A>.
	    <P/>
	    If the first element is <C>"mat"</C>, then the output is a Graver basis of the kernel of <A>A</A>. If it is <C>"lat"</C>, then the output is a Graver basis of the subgroup spanned by the rows of <A>A</A>.
	    
	    <Example><![CDATA[
gap> GraverBasis4ti2(["mat",[[3,5,7]]]);
[ [ 3, 1, -2 ], [ 7, 0, -3 ], [ 4, -1, -1 ], [ 1, -2, 1 ], [ 2, 3, -3 ], 
  [ 1, 5, -4 ], [ 0, 7, -5 ], [ 5, -3, 0 ] ]
gap> GraverBasis4ti2(["lat",[ [ 1, -2, 1 ], [ -3, -1, 2 ], [ -4, 1, 1 ] ]]);
[ [ 1, -2, 1 ], [ 0, 7, -5 ], [ 1, 5, -4 ], [ 2, 3, -3 ], [ 3, 1, -2 ], 
  [ 4, -1, -1 ], [ 7, 0, -3 ], [ 5, -3, 0 ] ]
            ]]></Example>
	  </Description>
	</ManSection>

      </Section>
      
      <Section>
          <Heading>
              ZSolve
          </Heading>

<ManSection>
    <Func Name="ZSolve4ti2" Arg="problem"/>
    <Description>
        <C>problem</C> is a list to specify the input components of the "problem" (see the 4ti2 manual).
        
        <Example><![CDATA[
gap> problem:=["mat",
[[0, 0, 0, 0, 0, 3, -4, -1, 2], [0, 0, 0, 0, 1, -1, 1, 0, -1],
[0, 0, 0, 1, 2, 0, 0, -1, -2], [0, 0, 1, 0, 1, 0, 0, -1, -1],
[0, 1, 2, 0, 0, 0, 0, -1, -2], [1, 0, 2, 0, 0, 0, 0, -2, -1],
[-2, 0, -2, 0, 0, 0, 0, 3, 0], [-2, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, -2, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0]],
"rel", [[0, 0, 0, 0, 0, 0, -1, -1, -1, -1]], "sign",
[[0, 0, 0, 0, 0, 0, 0, 0, 0]]];;
ZSolve4ti2(problemzso);
            
rec( zhom := [ [ 1, 0, 2, 2, 1, 0, 0, 2, 1 ], [ 2, 0, 1, 0, 1, 2, 1, 2, 0 ],
[ 1, 2, 0, 0, 1, 2, 2, 0, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
[ 0, 2, 1, 2, 1, 0, 1, 0, 2 ] ],
zinhom := [ [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ] )
            
gap> ZSolve4ti2(["mat",TransposedMat([[2,0],[0,2],[1,2],[2,1]]),"sign",
[1,1,1,1],"rhs",[[15,15]]]);
rec( zhom := [  ], zinhom := [ [ 0, 3, 1, 7 ], [ 2, 4, 1, 5 ], [ 4, 5, 1, 3 ],
    [ 6, 6, 1, 1 ], [ 1, 2, 3, 5 ], [ 3, 3, 3, 3 ], [ 3, 0, 7, 1 ], [ 5, 4, 3, 1 ],
    [ 4, 2, 5, 1 ], [ 2, 1, 5, 3 ], [ 0, 0, 5, 5 ] ] )
        ]]></Example>
    </Description>
</ManSection>

    </Section>
    </Chapter>
    


  </Body>
  
  
  <TheIndex/>
</Book>
